import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'dart:math' as math;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Payment App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        fontFamily: 'SF Pro Display',
      ),
      home: MainScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MainScreen extends StatefulWidget {
  @override
  _MainScreenState createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen>
    with TickerProviderStateMixin {
  int _currentIndex = 1;
  bool _isCardSelected = true;
  bool _isFrozen = false;
  bool _isLoading = true;

  String _cardNumber = '';
  String _expiryDate = '';
  String _cvv = '';

  late AnimationController _freezeController;
  late Animation<double> _freezeAnimation;
  late Animation<double> _textFadeAnimation;
  late Animation<double> _brightnessAnimation;

  final String yoloSvgString = '''
<svg width="49" height="16" viewBox="0 0 49 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M37.4545 14.5866C37.5153 14.4288 37.9284 13.7246 38.0378 13.5789C38.0864 13.6031 38.1471 13.6274 38.1957 13.6638C38.8276 14.016 39.4959 14.2467 40.2128 14.356C42.5702 14.7202 44.8668 13.7246 46.2156 11.8304C46.7989 11.0047 47.1634 10.0941 47.2971 9.09842C47.7102 5.91719 45.7174 3.19736 42.9833 2.3717C42.2178 2.141 41.4401 2.05601 40.6503 2.12886C37.8069 2.38384 35.6926 4.48443 35.1579 6.96141C34.8906 8.23633 34.9999 9.47483 35.5103 10.689C35.6197 10.9683 35.729 11.2354 35.7898 11.539C36.045 12.826 35.4617 14.1374 34.3438 14.8295C33.8213 15.1452 33.2623 15.303 32.6426 15.303C31.6948 15.303 30.7591 15.303 29.8113 15.303C29.3374 15.303 28.8635 15.303 28.3896 15.303C27.5876 15.303 26.895 15.0238 26.2875 14.5017C26.1295 14.3681 25.9958 14.2224 25.8743 14.0645C25.85 14.0403 25.8379 14.0038 25.8014 13.9553C25.8743 13.8338 25.9715 13.7367 26.0566 13.6274C26.1295 13.5181 26.2145 13.4089 26.2996 13.3117C26.3847 13.2025 26.4576 13.081 26.5426 12.9596C26.5791 13.0325 26.6155 13.0689 26.6398 13.1175C26.9558 13.6396 27.4175 13.9553 28.0129 14.0888C28.1223 14.1131 28.2438 14.1253 28.3532 14.1253C29.7992 14.1253 31.2573 14.1253 32.7033 14.1253C33.5418 14.1253 34.3195 13.5667 34.5868 12.7168C34.9392 11.5754 34.1858 10.3733 33.0071 10.1791C32.8735 10.1548 32.7398 10.1548 32.6061 10.1426C32.0715 10.1426 31.5368 10.1426 31.0143 10.1426C30.9293 10.1426 30.832 10.1426 30.747 10.1062C30.5526 10.0334 30.4189 9.88766 30.3703 9.68124C30.3581 9.59625 30.346 9.51125 30.346 9.41411C30.346 7.5928 30.346 5.78363 30.346 3.96232C30.346 3.78018 30.346 3.59805 30.2974 3.41592C30.103 2.51741 29.301 1.87387 28.4139 1.83745C27.454 1.80102 26.6034 2.44455 26.3847 3.36735C26.3482 3.5252 26.3239 3.68305 26.3239 3.84089C26.3239 4.15659 26.3239 4.47228 26.3239 4.78798C26.3239 5.79577 26.3239 6.81571 26.3239 7.8235C26.3239 8.18776 26.2996 8.53989 26.2388 8.90415C26.1173 9.60839 25.9351 10.3005 25.6556 10.9683C25.1209 12.2554 24.246 13.2632 23.1038 14.0524C22.2411 14.6474 21.2811 15.0359 20.2361 15.218C16.2383 15.8859 12.678 13.3117 11.8274 9.6691C11.7423 9.30484 11.6937 8.94057 11.6573 8.56417C11.6573 8.47918 11.6573 8.40632 11.7302 8.34561C12.0704 8.01778 12.4107 7.68994 12.7631 7.3621C12.7752 7.34996 12.7995 7.33782 12.836 7.31353C12.836 7.34996 12.836 7.37424 12.836 7.39853C12.7266 8.57631 12.921 9.70553 13.4678 10.7497C14.4035 12.5468 15.8616 13.6396 17.8423 14.0524C21.2447 14.6595 24.2582 12.4861 24.9873 9.40197C25.0845 8.977 25.1452 8.55203 25.1452 8.12705C25.1452 6.81571 25.1452 5.50436 25.1452 4.19301C25.1452 4.07159 25.1452 3.95017 25.1452 3.82875C25.1574 2.68739 25.6556 1.78888 26.6155 1.16963C28.4625 -0.00815058 30.9414 0.975359 31.4396 3.18522C31.5004 3.4402 31.5125 3.69519 31.5125 3.96232C31.5125 5.54079 31.5125 7.1314 31.5125 8.70987C31.5125 8.79487 31.5125 8.86772 31.5368 8.96486C31.6097 8.96486 31.6705 8.96486 31.7312 8.96486C31.9986 8.96486 32.278 8.96486 32.5454 8.96486C32.9585 8.96486 33.3717 9.02557 33.7605 9.15913C33.7848 9.15913 33.8213 9.17128 33.8577 9.18342C33.8577 9.13485 33.8577 9.09842 33.8577 9.062C33.8334 8.77059 33.8091 8.46703 33.8213 8.17562C33.8577 6.41502 34.4288 4.84869 35.5711 3.50092C36.6647 2.21385 38.0499 1.38819 39.7146 1.06035C43.7003 0.28326 47.3578 2.77239 48.2813 6.47573C48.4757 7.25282 48.5365 8.04206 48.4757 8.8313C48.1963 12.1947 45.7538 14.7566 42.7646 15.4123C42.1571 15.5459 41.5373 15.6066 40.9176 15.5823C39.7268 15.5337 38.621 15.2302 37.576 14.6595C37.5274 14.6352 37.4667 14.5988 37.418 14.5624L37.4545 14.5866Z" fill="#ED1C24"/>
<path d="M23.8086 2.44456C23.8207 3.0031 23.8329 3.54949 23.8329 4.13231C23.7843 4.09589 23.76 4.08374 23.7478 4.05946C23.5777 3.87733 23.4076 3.68306 23.2253 3.51307C22.3383 2.67526 21.2933 2.15315 20.1024 1.93459C19.5313 1.82531 18.9602 1.81317 18.377 1.87388C17.2712 1.9953 16.2626 2.38385 15.3634 3.03952C15.2905 3.10023 15.2176 3.16094 15.1447 3.22166C14.0997 4.24159 13.0668 5.26153 12.0218 6.28146C11.232 7.05856 10.43 7.82351 9.64016 8.6006C9.44574 8.78274 9.4822 8.72202 9.4822 8.97701C9.4822 10.2641 9.4822 11.5633 9.4822 12.8503C9.4822 13.5667 9.25132 14.1981 8.78957 14.7324C8.14556 15.4852 7.30711 15.8373 6.31071 15.7766C5.19279 15.7159 4.06272 14.9509 3.67387 13.6881C3.57666 13.3846 3.54021 13.081 3.54021 12.7653C3.54021 11.5633 3.54021 10.3612 3.54021 9.15914C3.54021 8.81916 3.57666 8.92844 3.35794 8.69774C2.53165 7.81137 1.69321 6.93714 0.866924 6.05076C0.247207 5.38295 -0.0201223 4.59371 0.0770881 3.6952C0.222904 2.37171 1.21931 1.32749 2.5195 1.12107C3.50376 0.963226 4.3665 1.24249 5.08343 1.93459C5.50872 2.34742 5.92187 2.7724 6.33501 3.18523C6.38362 3.2338 6.43222 3.28237 6.48082 3.31879C6.55373 3.31879 6.59019 3.25808 6.62664 3.22166C7.05194 2.79668 7.47723 2.37171 7.90253 1.94674C8.25492 1.59462 8.66806 1.35177 9.14196 1.20607C10.272 0.866089 11.4993 1.23035 12.2527 2.14101C12.3013 2.18958 12.3378 2.25029 12.3742 2.29886C12.2891 2.42028 11.7545 2.96667 11.5601 3.13666C11.4872 3.13666 11.475 3.06381 11.4507 3.01524C11.1955 2.66312 10.8674 2.42028 10.4422 2.32314C9.83459 2.17744 9.29993 2.311 8.82603 2.69955C8.76527 2.74811 8.71667 2.80882 8.65591 2.85739C8.1091 3.40379 7.56229 3.95018 7.01548 4.49658C6.97903 4.533 6.94257 4.56943 6.90612 4.60585C6.6874 4.82441 6.29856 4.82441 6.07983 4.60585C6.04338 4.56943 6.00692 4.533 5.97047 4.49658C5.41151 3.93804 4.85255 3.3795 4.29359 2.82097C3.97766 2.50527 3.61312 2.32314 3.17567 2.27457C2.85974 2.23815 2.55595 2.29886 2.26432 2.42028C1.15855 2.93024 0.866924 4.36301 1.70536 5.26153C2.58026 6.19647 3.45515 7.13141 4.3422 8.05421C4.37865 8.09064 4.4151 8.1392 4.46371 8.17563C4.64598 8.33348 4.70674 8.53989 4.70674 8.78273C4.70674 10.0941 4.70674 11.4176 4.70674 12.7411C4.70674 12.9232 4.71889 13.0932 4.76749 13.2632C4.94976 14.016 5.65454 14.5988 6.46867 14.6109C7.33142 14.6231 8.1334 14.0281 8.27922 13.081C8.29137 12.9718 8.29137 12.8625 8.29137 12.7532C8.29137 11.3811 8.29137 10.0091 8.29137 8.62489C8.29137 8.58846 8.29137 8.55203 8.29137 8.51561C8.29137 8.33348 8.35213 8.17563 8.48579 8.04207C8.70452 7.83565 8.91109 7.61709 9.11766 7.41068C9.49435 7.03427 9.87104 6.65787 10.2477 6.28146C10.8553 5.6865 11.475 5.10368 12.0826 4.52086C12.3864 4.22945 12.6901 3.93804 12.9818 3.64663C13.164 3.47664 13.3342 3.29451 13.4921 3.11238C14.6951 1.80103 16.1654 0.951084 17.9152 0.611105C19.4827 0.307553 20.9652 0.586821 22.3504 1.37606C22.8365 1.65533 23.2982 1.9953 23.7235 2.35957C23.7478 2.38385 23.7721 2.39599 23.7964 2.42028L23.8086 2.44456Z" fill="#ED1C24"/>
</svg>
''';

  final String yesbankSvgString = '''<svg width="49" height="22" viewBox="0 0 49 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.194397 18.251V7.51743H24.0717L16.1004 18.251H0.194397ZM18.7008 18.251L24.7643 7.51743H48.1677V18.251H18.6887H18.7008Z" fill="#0862AB"/>
<path d="M48.3743 7.32315H0V18.4453H16.2827L16.5015 18.3239L23.7558 8.5495L18.6887 17.5225L18.069 18.4453H48.3743V7.32315ZM23.3305 7.88169L15.9061 17.8746H0.558959V7.88169H23.3305ZM47.8032 7.88169V17.8746H19.3327L24.9831 7.88169H47.8032Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.3413 15.4343C30.4385 15.325 30.7059 14.56 30.7788 14.5479H33.0146L33.4156 15.4343H34.327L33.1483 12.8358C32.9539 12.3987 32.7473 11.9738 32.5529 11.5366L32.0304 10.3953C31.9818 10.2739 31.9939 10.2617 31.9332 10.2617C31.8845 10.2739 31.8967 10.2617 31.8724 10.3346L31.3013 11.5488C31.0947 11.9738 30.9003 12.4109 30.6937 12.848L29.6244 15.1186C29.588 15.2036 29.5029 15.3614 29.4786 15.4464H30.3413V15.4343ZM31.0826 13.8315C31.119 13.6979 31.8602 12.0102 31.9088 11.9738L32.7108 13.8315H31.0947H31.0826ZM42.6263 12.8116C42.76 12.6901 43.0516 12.338 43.1974 12.2166L44.607 10.7231C44.692 10.626 44.8135 10.5288 44.8743 10.4196H43.963C43.8779 10.4196 43.89 10.4196 43.8414 10.4438L43.003 11.3302C43.003 11.3302 42.9179 11.4152 42.8693 11.4759C42.5048 11.8645 42.1402 12.253 41.7636 12.6416C41.7393 11.9616 41.7636 11.1238 41.7636 10.4074H40.9008V15.4221H41.7636V15.3493C41.7757 14.7543 41.7636 14.0258 41.7636 13.4065V13.0908L43.9143 15.325C43.9994 15.41 43.9508 15.4221 44.1088 15.4221H45.1173L44.4976 14.7664C44.3882 14.6693 44.3032 14.5479 44.1938 14.4386L43.0881 13.2972C43.0881 13.2972 42.9787 13.2001 42.9301 13.1394C42.8693 13.0665 42.6628 12.8723 42.6263 12.7994V12.8116ZM28.0083 12.7508C28.3728 12.5809 28.6766 12.3987 28.7617 11.9373C28.8589 11.4274 28.6766 11.0145 28.4093 10.7838C28.1177 10.5288 27.6923 10.4317 27.2063 10.4196C26.6959 10.4196 26.1734 10.4196 25.6631 10.4196V15.4343C26.1856 15.4464 26.8418 15.4585 27.3643 15.4221C27.8503 15.3857 28.2513 15.2643 28.5794 14.9486C28.8589 14.6693 28.9925 14.1108 28.871 13.6129C28.7131 12.9208 28.1663 12.848 28.0326 12.763L28.0083 12.7508ZM26.4772 12.4959V11.0752C26.7932 11.0388 27.4372 11.0631 27.6924 11.2452C27.8382 11.3545 27.9232 11.5124 27.9232 11.7673C27.9111 12.4716 26.9997 12.6173 26.4772 12.4959ZM26.4772 14.7179V13.1515C26.8539 13.0908 27.5101 13.1394 27.7896 13.358C28.0812 13.5887 28.1176 14.1836 27.7896 14.4872C27.5344 14.73 26.7688 14.7907 26.4651 14.7179H26.4772ZM36.016 12.253C36.0767 12.2894 36.7694 13.0301 36.8423 13.103C36.976 13.2487 37.1096 13.3822 37.2433 13.5279C37.5714 13.8801 37.9481 14.2443 38.264 14.5964L39.066 15.4343C39.2239 15.5921 39.1875 15.5921 39.309 15.5921V10.4196H38.4584V13.6008L37.2311 12.3259C37.1582 12.2652 37.0975 12.1802 37.0246 12.1073C36.9638 12.0345 36.8909 11.9738 36.818 11.9009C36.3684 11.4031 35.858 10.9052 35.4084 10.4196C35.372 10.3831 35.3477 10.3467 35.3112 10.3103C35.2626 10.2617 35.2626 10.2617 35.1654 10.2617V15.4343H36.0038V12.2652L36.016 12.253Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12.7351 15.3611C13.8651 15.7739 15.4812 15.7497 15.8093 14.3776C16.0281 13.4427 15.5177 12.8841 14.7643 12.4713L14.0352 12.0585C13.4277 11.7063 13.7072 11.0992 14.4119 11.2207C14.6185 11.2571 14.8129 11.3299 14.983 11.4149C15.1653 11.4999 15.3111 11.5971 15.4691 11.6699V10.5043C15.2747 10.4557 15.0924 10.3829 14.8737 10.3343C12.6864 9.83646 12.0424 11.7913 13.0631 12.7141C13.2089 12.8477 13.3183 12.9327 13.5006 13.042C13.8287 13.2484 14.1082 13.3698 14.4362 13.6005C14.9952 13.9769 14.7157 14.7054 13.6829 14.499C13.1846 14.4019 12.7472 14.074 12.6257 14.0376L12.7229 15.3611H12.7351ZM11.5199 14.3897H9.60001V13.3941H11.2283V12.3742H9.60001V11.4635H11.5078V10.4314H8.46994V15.434H11.5199V14.3897ZM4.8367 13.0541C4.8367 13.0541 4.84885 13.0298 4.861 13.1027V15.434H6.01538C6.03969 14.8147 6.01538 13.9648 6.01538 13.297V13.0663C6.01538 12.9934 6.01538 13.0298 6.03968 13.0055C6.16119 12.7991 7.44924 11.0871 7.70441 10.7593C7.78947 10.65 7.87453 10.5407 7.93528 10.4314H6.6837L5.55363 11.9977C5.45642 11.9006 4.54507 10.4436 4.50861 10.4314H3.08691L3.52436 11.0871C3.67018 11.3056 3.82815 11.5242 3.96181 11.7428L4.84886 13.0541H4.8367Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M26.6113 4.1662L16.9632 21.238L14.1805 18.2996L16.0762 18.3603L26.6113 4.1662Z" fill="#ED1C24"/>
<path d="M24.9709 7.83311L24.6428 7.65098L26.7693 3.86264L23.9381 7.79668L23.6464 7.57812L29.0659 0.547852L24.9709 7.83311Z" fill="white"/>
<path d="M16.9875 21.5415L14.0469 18.421L14.3143 18.1782L16.9389 20.9466L18.6644 18.2267L18.9804 18.421L16.9875 21.5415Z" fill="white"/>
</svg>
''';
  final String rupaySvgString = '''<svg width="72" height="35" viewBox="0 0 72 35" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M67.076 1.48193L71.0737 9.42286L62.665 17.3881L67.076 1.48193Z" fill="#048040"/>
<path d="M64.2937 1.48193L68.3037 9.42286L59.8828 17.3881L64.2937 1.48193Z" fill="#F37124"/>
<path d="M0.0615234 14.4983L4.0593 0.109863H10.4509C12.4437 0.109863 13.7803 0.425561 14.4608 1.08123C15.1291 1.72477 15.2628 2.78112 14.8618 4.26246C14.6188 5.13669 14.2421 5.86522 13.7317 6.44804C13.2214 7.03086 12.5531 7.49226 11.7268 7.8201C12.4194 7.99009 12.869 8.33007 13.0756 8.8279C13.27 9.32572 13.2578 10.0664 13.0148 11.0135L12.5288 13.0169V13.0655C12.3829 13.6362 12.4316 13.9397 12.6503 13.964L12.5045 14.4983H8.17859C8.19075 14.1583 8.21504 13.8547 8.2515 13.5997C8.28795 13.3447 8.32441 13.1383 8.36086 13.0048L8.76185 11.572C8.96842 10.8313 8.98058 10.3092 8.78616 10.0057C8.60389 9.70211 8.16645 9.54428 7.49812 9.54428H5.68757L4.30233 14.5104H0.0736773L0.0615234 14.4983ZM6.56247 6.29018H8.50667C9.18715 6.29018 9.68536 6.19305 10.0013 5.98663C10.3172 5.78022 10.5481 5.45238 10.6818 4.94241C10.8154 4.43244 10.7911 4.08033 10.5845 3.88606C10.378 3.69178 9.90408 3.59464 9.1507 3.59464H7.31585L6.56247 6.29018Z" fill="white"/>
<path d="M26.7098 3.87402L23.757 14.4862H20.1845L20.622 12.932C19.9901 13.5513 19.3461 14.0127 18.702 14.3162C18.058 14.6198 17.3776 14.7655 16.6606 14.7655C16.0652 14.7655 15.5549 14.6562 15.1539 14.4498C14.7407 14.2312 14.4369 13.9155 14.2304 13.4906C14.0481 13.1142 13.963 12.6528 13.9995 12.1064C14.036 11.5721 14.2182 10.6493 14.5706 9.37439L16.1017 3.87402H20.0144L18.4955 9.3501C18.2768 10.1515 18.216 10.7222 18.3254 11.0257C18.4347 11.3414 18.7385 11.4993 19.2246 11.4993C19.7106 11.4993 20.1359 11.3171 20.4761 10.965C20.8164 10.6007 21.0959 10.0665 21.2903 9.33797L22.8092 3.87402H26.7219H26.7098Z" fill="white"/>
<path d="M25.2881 14.4983L29.2737 0.109863H34.7661C35.9812 0.109863 36.9169 0.182719 37.5852 0.340566C38.2535 0.486271 38.776 0.72912 39.1649 1.0691C39.6509 1.51836 39.9547 2.07688 40.0762 2.7447C40.1856 3.41251 40.1248 4.1896 39.8696 5.1124C39.4201 6.71516 38.6302 7.95365 37.5244 8.81574C36.4065 9.66569 35.0213 10.0907 33.3566 10.0907H30.7926L29.5775 14.4983H25.3002H25.2881ZM31.7647 6.5816H33.1378C34.0249 6.5816 34.6567 6.47232 35.0213 6.25376C35.3737 6.04734 35.6288 5.65879 35.7868 5.1124C35.9326 4.55386 35.8962 4.16532 35.6653 3.9589C35.4344 3.74035 34.8633 3.63106 33.952 3.63106H32.5789L31.7647 6.5816Z" fill="white"/>
<path d="M44.4749 14.4982L44.5113 13.4782C43.8795 13.9518 43.2476 14.3039 42.6036 14.5346C41.9595 14.7653 41.2791 14.8746 40.55 14.8746C39.4321 14.8746 38.6665 14.571 38.2169 13.9882C37.7795 13.4054 37.7066 12.5676 37.9982 11.4869C38.2899 10.4427 38.8002 9.6656 39.5414 9.15564C40.2827 8.65781 41.5099 8.29355 43.2354 8.06286C43.4542 8.02643 43.7458 8.00215 44.1103 7.95358C45.3862 7.80788 46.1031 7.4679 46.249 6.90936C46.334 6.60581 46.2854 6.3751 46.091 6.24154C45.9087 6.09584 45.5685 6.03513 45.0824 6.03513C44.6814 6.03513 44.3412 6.12011 44.086 6.2901C43.8187 6.46009 43.6121 6.72722 43.4785 7.09148H39.6629C40.0153 5.90156 40.708 4.99091 41.7651 4.3838C42.8223 3.7767 44.2075 3.47314 45.9209 3.47314C46.735 3.47314 47.4519 3.54599 48.096 3.71598C48.74 3.87383 49.2017 4.10452 49.5055 4.37165C49.8822 4.71163 50.1009 5.10019 50.1617 5.52516C50.2346 5.95013 50.1617 6.55723 49.9308 7.35861L48.2904 13.284C48.2418 13.4782 48.2296 13.6482 48.2539 13.8061C48.2782 13.9518 48.3511 14.0853 48.4605 14.1703L48.3754 14.4739H44.4384L44.4749 14.4982ZM45.4227 9.75061C45.0095 9.9206 44.4627 10.0784 43.7944 10.2484C42.7372 10.5277 42.1418 10.9041 42.0203 11.3776C41.9352 11.6812 41.9595 11.9119 42.1175 12.0819C42.2633 12.2519 42.5185 12.3369 42.8709 12.3369C43.5149 12.3369 44.0374 12.179 44.4263 11.8512C44.8151 11.5233 45.1067 11.0012 45.3133 10.297C45.3498 10.1391 45.3862 10.0299 45.3984 9.95702L45.4227 9.76274" fill="white"/>
<path d="M48.4355 18.6752L49.3104 15.5304H50.4284C50.8051 15.5304 51.0967 15.4576 51.3033 15.324C51.5098 15.1904 51.6556 14.9476 51.7407 14.6319C51.7772 14.4984 51.8014 14.3405 51.8258 14.1705C51.8379 14.0005 51.8379 13.8063 51.8258 13.5877L51.2303 3.87402H55.1917L55.1309 10.3093L58.594 3.87402H62.2759L56.1638 14.4376C55.4712 15.6154 54.9608 16.4289 54.6449 16.8661C54.3289 17.3032 54.0251 17.6432 53.7335 17.8739C53.3568 18.1896 52.9315 18.4202 52.4819 18.5538C52.0323 18.6874 51.3397 18.7602 50.4041 18.7602C50.1367 18.7602 49.8329 18.7602 49.4927 18.7359C49.1646 18.7238 48.8122 18.6995 48.4477 18.6752" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M17.9239 34.4234L18.811 30.7201H19.5279C20.5729 30.7201 21.3992 30.6958 22.1283 30.1616C22.7845 29.688 23.1855 28.9716 23.2827 28.0731C23.3677 27.3203 23.149 26.6889 22.6751 26.2761C22.0918 25.7661 21.3628 25.754 20.4271 25.754H18.6287L16.5508 34.4113H17.9118L17.9239 34.4234ZM19.1026 29.4937L19.698 26.9925H20.1355C21.3871 26.9925 22.0189 27.1503 21.9096 28.1338C21.7881 29.2752 21.0104 29.4937 19.5522 29.4937H19.0905H19.1026ZM26.3569 29.6152L26.9888 26.9925H27.2075C28.4591 26.9925 29.091 27.1503 28.9816 28.1945C28.848 29.3966 28.0703 29.6152 26.6243 29.6152H26.3569ZM25.2026 34.4234L26.1018 30.7201H26.4177L28.3012 34.4234H29.8322L27.8394 30.6715C29.3097 30.4408 30.2089 29.4937 30.3669 28.0731C30.4519 27.3203 30.2211 26.6889 29.7472 26.2761C29.1639 25.7661 28.4348 25.754 27.4992 25.754H25.9317L23.8538 34.4113H25.2026V34.4234ZM31.2539 34.4234H36.1144L36.4182 33.1728H32.9065L33.5748 30.3801H37.0865L37.3782 29.1659H33.8786L34.389 26.9803H37.9007L38.1923 25.754H33.3318L31.2539 34.4113V34.4234ZM39.8327 34.4234L40.7198 30.7201H41.4367C42.4817 30.7201 43.308 30.6958 44.0371 30.1616C44.6933 29.688 45.0943 28.9716 45.1915 28.0731C45.2765 27.3203 45.0578 26.6889 44.5839 26.2761C44.0006 25.7661 43.2716 25.754 42.3359 25.754H40.5375L38.4596 34.4113H39.8206L39.8327 34.4234ZM41.0114 29.4937L41.6068 26.9925H42.0443C43.2959 26.9925 43.9277 27.1503 43.8184 28.1338C43.6969 29.2752 42.9192 29.4937 41.461 29.4937H40.9993H41.0114ZM47.2936 31.2301L48.6546 29.1052C48.849 28.8016 49.0556 28.4374 49.2865 28.0003C49.3229 28.4859 49.3472 28.8502 49.3958 29.0809L49.8333 31.2301H47.2936ZM43.7819 34.4234L49.7847 25.4261L51.9719 34.4234H50.5623L50.0763 32.3714H46.6253L45.2644 34.4234H43.7819ZM53.0533 34.4234H54.4265L56.5165 25.7661H55.1312L53.0533 34.4234ZM57.039 34.4234H59.9188C60.5386 34.4234 61.1583 34.3991 61.8144 34.217C62.6043 33.9985 63.2847 33.5856 63.8559 33.0028C64.6457 32.1893 65.1925 31.0479 65.3262 29.7852C65.4841 28.3767 65.0832 27.2353 64.2326 26.5311C63.3212 25.7783 62.2519 25.7418 60.9396 25.7418H59.0925L57.0147 34.3992L57.039 34.4234ZM58.6916 33.1849L60.174 26.9925H60.7573C61.7537 26.9925 62.5314 27.0046 63.1632 27.5389C63.7708 28.0488 64.0503 28.8624 63.9409 29.858C63.8194 31.0236 63.2362 32.0314 62.3856 32.6021C61.5228 33.1849 60.5264 33.1971 59.1898 33.1971H58.6916V33.1849Z" fill="white"/>
</svg>
''';

  final String snowflakeSvgString = '''<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M17.6333 13.4416L15.9667 12.4833L16.7083 12.2833C16.8173 12.2579 16.92 12.2109 17.0103 12.145C17.1007 12.0791 17.1768 11.9957 17.2343 11.8997C17.2917 11.8037 17.3293 11.6972 17.3446 11.5864C17.36 11.4757 17.353 11.3629 17.3239 11.2549C17.2948 11.1469 17.2443 11.0459 17.1753 10.9579C17.1063 10.8698 17.0203 10.7965 16.9225 10.7424C16.8246 10.6883 16.7168 10.6545 16.6056 10.6429C16.4944 10.6313 16.3819 10.6422 16.275 10.675L13.925 11.3083L11.6667 9.99998L13.925 8.69165L16.275 9.32498H16.4917C16.7127 9.35371 16.9361 9.29347 17.1127 9.15751C17.2892 9.02154 17.4046 8.82099 17.4333 8.59998C17.4621 8.37897 17.4018 8.15559 17.2659 7.97899C17.1299 7.8024 16.9293 7.68704 16.7083 7.65831L15.9667 7.49998L17.6333 6.54165C17.7285 6.48693 17.812 6.41399 17.8791 6.32701C17.9461 6.24002 17.9953 6.14068 18.0239 6.03467C18.0526 5.92866 18.06 5.81804 18.0459 5.70914C18.0318 5.60024 17.9964 5.49519 17.9417 5.39998C17.8869 5.30477 17.814 5.22127 17.727 5.15425C17.64 5.08723 17.5407 5.038 17.4347 5.00937C17.3287 4.98073 17.2181 4.97327 17.1092 4.98738C17.0003 5.0015 16.8952 5.03693 16.8 5.09165L15 6.14165L15.25 5.21665C15.2828 5.10972 15.2937 4.99729 15.2821 4.88605C15.2705 4.77481 15.2367 4.66705 15.1825 4.56917C15.1284 4.4713 15.0552 4.38532 14.9671 4.31635C14.8791 4.24739 14.778 4.19685 14.6701 4.16776C14.5621 4.13866 14.4493 4.1316 14.3386 4.147C14.2278 4.16239 14.1212 4.19993 14.0253 4.25737C13.9293 4.31481 13.8459 4.39097 13.78 4.48133C13.7141 4.57169 13.667 4.67439 13.6417 4.78331L12.9583 7.28331L10.8333 8.55831V5.94998L12.5583 4.22498C12.7135 4.06884 12.8007 3.85763 12.8007 3.63748C12.8007 3.41732 12.7135 3.20612 12.5583 3.04998C12.4809 2.97187 12.3887 2.90988 12.2871 2.86757C12.1856 2.82526 12.0767 2.80348 11.9667 2.80348C11.8567 2.80348 11.7477 2.82526 11.6462 2.86757C11.5446 2.90988 11.4525 2.97187 11.375 3.04998L10.8333 3.59165V1.66665C10.8333 1.44563 10.7455 1.23367 10.5893 1.07739C10.433 0.92111 10.221 0.833313 10 0.833313C9.77898 0.833313 9.56702 0.92111 9.41074 1.07739C9.25446 1.23367 9.16667 1.44563 9.16667 1.66665V3.72498L8.49166 3.04998C8.4142 2.97187 8.32203 2.90988 8.22048 2.86757C8.11893 2.82526 8.01001 2.80348 7.9 2.80348C7.78999 2.80348 7.68107 2.82526 7.57952 2.86757C7.47797 2.90988 7.3858 2.97187 7.30833 3.04998C7.15312 3.20612 7.066 3.41732 7.066 3.63748C7.066 3.85763 7.15312 4.06884 7.30833 4.22498L9.16667 6.08331V8.58331L7.025 7.31665L6.34167 4.81665C6.31629 4.70772 6.26925 4.60502 6.20334 4.51467C6.13744 4.42431 6.05402 4.34814 5.95806 4.2907C5.86209 4.23326 5.75555 4.19573 5.64478 4.18033C5.534 4.16494 5.42126 4.172 5.31327 4.20109C5.20528 4.23019 5.10426 4.28072 5.01621 4.34969C4.92817 4.41865 4.8549 4.50463 4.80079 4.6025C4.74667 4.70038 4.71281 4.80815 4.70122 4.91938C4.68963 5.03062 4.70055 5.14305 4.73333 5.24998L5 6.14165L3.2 5.10831C3.10479 5.0536 2.99974 5.01817 2.89084 5.00405C2.78194 4.98993 2.67132 4.9974 2.56531 5.02603C2.45929 5.05466 2.35996 5.1039 2.27297 5.17092C2.18598 5.23794 2.11305 5.32144 2.05833 5.41665C2.00361 5.51186 1.96819 5.61691 1.95407 5.72581C1.93995 5.83471 1.94742 5.94532 1.97605 6.05134C2.03388 6.26544 2.17438 6.44781 2.36666 6.55831L4.03333 7.49998L3.33333 7.71665C3.11232 7.74538 2.91177 7.86073 2.77581 8.03733C2.63984 8.21392 2.5796 8.4373 2.60833 8.65831C2.63706 8.87933 2.75242 9.07987 2.92901 9.21584C3.10561 9.3518 3.32898 9.41205 3.55 9.38331H3.76667L6.11667 8.74998L8.33333 9.99998L6.075 11.3083L3.725 10.675C3.61473 10.634 3.49705 10.6169 3.37969 10.6247C3.26232 10.6325 3.14794 10.665 3.04406 10.7202C2.94018 10.7754 2.84915 10.8519 2.77697 10.9448C2.70478 11.0376 2.65308 11.1447 2.62524 11.259C2.59741 11.3733 2.59409 11.4922 2.6155 11.6078C2.6369 11.7235 2.68255 11.8333 2.74943 11.9301C2.81632 12.0268 2.90292 12.1083 3.00356 12.1692C3.1042 12.2301 3.21659 12.269 3.33333 12.2833L4.075 12.4833L2.40833 13.4416C2.21605 13.5522 2.07554 13.7345 2.01772 13.9486C1.95989 14.1627 1.98949 14.391 2.1 14.5833C2.21051 14.7756 2.39287 14.9161 2.60697 14.9739C2.82108 15.0318 3.04938 15.0022 3.24167 14.8916L5 13.8583L4.75 14.7833C4.71696 14.89 4.70571 15.0022 4.71689 15.1133C4.72808 15.2244 4.76149 15.3321 4.81512 15.4301C4.86876 15.528 4.94153 15.6142 5.02912 15.6835C5.11671 15.7527 5.21733 15.8037 5.325 15.8333C5.39699 15.8415 5.46968 15.8415 5.54167 15.8333C5.7298 15.8398 5.91458 15.7823 6.0659 15.6703C6.21722 15.5584 6.32617 15.3984 6.375 15.2166L7.05833 12.7166L9.16667 11.4416V14.05L7.44167 15.775C7.28646 15.9311 7.19934 16.1423 7.19934 16.3625C7.19934 16.5826 7.28646 16.7938 7.44167 16.95C7.51884 17.0287 7.61088 17.0914 7.71244 17.1343C7.81401 17.1772 7.92308 17.1995 8.03333 17.2C8.14359 17.1995 8.25266 17.1772 8.35422 17.1343C8.45578 17.0914 8.54782 17.0287 8.625 16.95L9.16667 16.4083V18.3333C9.16667 18.5543 9.25446 18.7663 9.41074 18.9226C9.56702 19.0788 9.77898 19.1666 10 19.1666C10.221 19.1666 10.433 19.0788 10.5893 18.9226C10.7455 18.7663 10.8333 18.5543 10.8333 18.3333V16.275L11.5083 16.95C11.5858 17.0281 11.678 17.0901 11.7795 17.1324C11.8811 17.1747 11.99 17.1965 12.1 17.1965C12.21 17.1965 12.3189 17.1747 12.4205 17.1324C12.522 17.0901 12.6142 17.0281 12.6917 16.95C12.8469 16.7938 12.934 16.5826 12.934 16.3625C12.934 16.1423 12.8469 15.9311 12.6917 15.775L10.8333 13.9166V11.4166L12.975 12.6583L13.6583 15.1583C13.7072 15.3401 13.8161 15.5 13.9674 15.612C14.1188 15.724 14.3035 15.7814 14.4917 15.775C14.5637 15.7832 14.6363 15.7832 14.7083 15.775C14.8147 15.7469 14.9145 15.6981 15.002 15.6313C15.0894 15.5645 15.1627 15.4811 15.2177 15.3858C15.2727 15.2905 15.3083 15.1852 15.3224 15.0761C15.3366 14.967 15.3289 14.8561 15.3 14.75L15 13.8583L16.7833 14.8916C16.8785 14.9464 16.9836 14.9818 17.0925 14.9959C17.2014 15.01 17.312 15.0026 17.418 14.9739C17.524 14.9453 17.6234 14.8961 17.7104 14.829C17.7973 14.762 17.8703 14.6785 17.925 14.5833C17.9797 14.4881 18.0151 14.3831 18.0293 14.2742C18.0434 14.1653 18.0359 14.0546 18.0073 13.9486C17.9786 13.8426 17.9294 13.7433 17.8624 13.6563C17.7954 13.5693 17.7119 13.4964 17.6167 13.4416H17.6333Z" fill="#A90808"/>
</svg>
''';

  final String homeSvgString = '''<svg width="24" height="26" viewBox="0 0 24 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.3">
<path d="M5 22.9286V15L10 16.0714V24L5 22.9286Z" stroke="white" stroke-linejoin="round"/>
<path d="M23 18.3659V8L14 13.8049V25L23 18.3659Z" stroke="white" stroke-linejoin="round"/>
<path d="M1 10.9767V22.2791L14 25V13.6977L7.5 7L1 10.9767Z" stroke="white" stroke-linejoin="round"/>
<path d="M16.4737 1L7.5 7L13.7368 14L23 7.93333L16.4737 1Z" stroke="white" stroke-linejoin="round"/>
</g>
</svg>
''';

  final String yolopaySvgString = '''<svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="path-1-inside-1_5937_79" fill="white">
<path d="M7 20H3C2.73478 20 2.48043 19.8946 2.29289 19.7071C2.10536 19.5196 2 19.2652 2 19V15C2 14.7348 1.89464 14.4804 1.70711 14.2929C1.51957 14.1054 1.26522 14 1 14C0.734784 14 0.48043 14.1054 0.292893 14.2929C0.105357 14.4804 0 14.7348 0 15V19C0 19.7956 0.31607 20.5587 0.87868 21.1213C1.44129 21.6839 2.20435 22 3 22H7C7.26522 22 7.51957 21.8946 7.70711 21.7071C7.89464 21.5196 8 21.2652 8 21C8 20.7348 7.89464 20.4804 7.70711 20.2929C7.51957 20.1054 7.26522 20 7 20ZM21 14C20.7348 14 20.4804 14.1054 20.2929 14.2929C20.1054 14.4804 20 14.7348 20 15V19C20 19.2652 19.8946 19.5196 19.7071 19.7071C19.5196 19.8946 19.2652 20 19 20H15C14.7348 20 14.4804 20.1054 14.2929 20.2929C14.1054 20.4804 14 20.7348 14 21C14 21.2652 14.1054 21.5196 14.2929 21.7071C14.4804 21.8946 14.7348 22 15 22H19C19.7956 22 20.5587 21.6839 21.1213 21.1213C21.6839 20.5587 22 19.7956 22 19V15C22 14.7348 21.8946 14.4804 21.7071 14.2929C21.5196 14.1054 21.2652 14 21 14ZM19 0H15C14.7348 0 14.4804 0.105357 14.2929 0.292893C14.1054 0.48043 14 0.734784 14 1C14 1.26522 14.1054 1.51957 14.2929 1.70711C14.4804 1.89464 14.7348 2 15 2H19C19.2652 2 19.5196 2.10536 19.7071 2.29289C19.8946 2.48043 20 2.73478 20 3V7C20 7.26522 20.1054 7.51957 20.2929 7.70711C20.4804 7.89464 20.7348 8 21 8C21.2652 8 21.5196 7.89464 21.7071 7.70711C21.8946 7.51957 22 7.26522 22 7V3C22 2.20435 21.6839 1.44129 21.1213 0.87868C20.5587 0.31607 19.7956 0 19 0ZM1 8C1.26522 8 1.51957 7.89464 1.70711 7.70711C1.89464 7.51957 2 7.26522 2 7V3C2 2.73478 2.10536 2.48043 2.29289 2.29289C2.48043 2.10536 2.73478 2 3 2H7C7.26522 2 7.51957 1.89464 7.70711 1.70711C7.89464 1.51957 8 1.26522 8 1C8 0.734784 7.89464 0.48043 7.70711 0.292893C7.51957 0.105357 7.26522 0 7 0H3C2.20435 0 1.44129 0.31607 0.87868 0.87868C0.31607 1.44129 0 2.20435 0 3V7C0 7.26522 0.105357 7.51957 0.292893 7.70711C0.48043 7.89464 0.734784 8 1 8ZM9 4H5C4.73478 4 4.48043 4.10536 4.29289 4.29289C4.10536 4.48043 4 4.73478 4 5V9C4 9.26522 4.10536 9.51957 4.29289 9.70711C4.48043 9.89464 4.73478 10 5 10H9C9.26522 10 9.51957 9.89464 9.70711 9.70711C9.89464 9.51957 10 9.26522 10 9V5C10 4.73478 9.89464 4.48043 9.70711 4.29289C9.51957 4.10536 9.26522 4 9 4ZM8 8H6V6H8V8ZM13 10H17C17.2652 10 17.5196 9.89464 17.7071 9.70711C17.8946 9.51957 18 9.26522 18 9V5C18 4.73478 17.8946 4.48043 17.7071 4.29289C17.5196 4.10536 17.2652 4 17 4H13C12.7348 4 12.4804 4.10536 12.2929 4.29289C12.1054 4.48043 12 4.73478 12 5V9C12 9.26522 12.1054 9.51957 12.2929 9.70711C12.4804 9.89464 12.7348 10 13 10ZM14 6H16V8H14V6ZM9 12H5C4.73478 12 4.48043 12.1054 4.29289 12.2929C4.10536 12.4804 4 12.7348 4 13V17C4 17.2652 4.10536 17.5196 4.29289 17.7071C4.48043 17.8946 4.73478 18 5 18H9C9.26522 18 9.51957 17.8946 9.70711 17.7071C9.89464 17.5196 10 17.2652 10 17V13C10 12.7348 9.89464 12.4804 9.70711 12.2929C9.51957 12.1054 9.26522 12 9 12ZM8 16H6V14H8V16ZM13 15C13.2652 15 13.5196 14.8946 13.7071 14.7071C13.8946 14.5196 14 14.2652 14 14C14.2652 14 14.5196 13.8946 14.7071 13.7071C14.8946 13.5196 15 13.2652 15 13C15 12.7348 14.8946 12.4804 14.7071 12.2929C14.5196 12.1054 14.2652 12 14 12H13C12.7348 12 12.4804 12.1054 12.2929 12.2929C12.1054 12.4804 12 12.7348 12 13V14C12 14.2652 12.1054 14.5196 12.2929 14.7071C12.4804 14.8946 12.7348 15 13 15ZM17 12C16.7348 12 16.4804 12.1054 16.2929 12.2929C16.1054 12.4804 16 12.7348 16 13V16C15.7348 16 15.4804 16.1054 15.2929 16.2929C15.1054 16.4804 15 16.7348 15 17C15 17.2652 15.1054 17.5196 15.2929 17.7071C15.4804 17.8946 15.7348 18 16 18H17C17.2652 18 17.5196 17.8946 17.7071 17.7071C17.8946 17.5196 18 17.2652 18 17V13C18 12.7348 17.8946 12.4804 17.7071 12.2929C17.5196 12.1054 17.2652 12 17 12ZM13 16C12.8022 16 12.6089 16.0586 12.4444 16.1685C12.28 16.2784 12.1518 16.4346 12.0761 16.6173C12.0004 16.8 11.9806 17.0011 12.0192 17.1951C12.0578 17.3891 12.153 17.5673 12.2929 17.7071C12.4327 17.847 12.6109 17.9422 12.8049 17.9808C12.9989 18.0194 13.2 17.9996 13.3827 17.9239C13.5654 17.8482 13.7216 17.72 13.8315 17.5556C13.9414 17.3911 14 17.1978 14 17C14 16.7348 13.8946 16.4804 13.7071 16.2929C13.5196 16.1054 13.2652 16 13 16Z"/>
</mask>
<path d="M7 20H3C2.73478 20 2.48043 19.8946 2.29289 19.7071C2.10536 19.5196 2 19.2652 2 19V15C2 14.7348 1.89464 14.4804 1.70711 14.2929C1.51957 14.1054 1.26522 14 1 14C0.734784 14 0.48043 14.1054 0.292893 14.2929C0.105357 14.4804 0 14.7348 0 15V19C0 19.7956 0.31607 20.5587 0.87868 21.1213C1.44129 21.6839 2.20435 22 3 22H7C7.26522 22 7.51957 21.8946 7.70711 21.7071C7.89464 21.5196 8 21.2652 8 21C8 20.7348 7.89464 20.4804 7.70711 20.2929C7.51957 20.1054 7.26522 20 7 20ZM21 14C20.7348 14 20.4804 14.1054 20.2929 14.2929C20.1054 14.4804 20 14.7348 20 15V19C20 19.2652 19.8946 19.5196 19.7071 19.7071C19.5196 19.8946 19.2652 20 19 20H15C14.7348 20 14.4804 20.1054 14.2929 20.2929C14.1054 20.4804 14 20.7348 14 21C14 21.2652 14.1054 21.5196 14.2929 21.7071C14.4804 21.8946 14.7348 22 15 22H19C19.7956 22 20.5587 21.6839 21.1213 21.1213C21.6839 20.5587 22 19.7956 22 19V15C22 14.7348 21.8946 14.4804 21.7071 14.2929C21.5196 14.1054 21.2652 14 21 14ZM19 0H15C14.7348 0 14.4804 0.105357 14.2929 0.292893C14.1054 0.48043 14 0.734784 14 1C14 1.26522 14.1054 1.51957 14.2929 1.70711C14.4804 1.89464 14.7348 2 15 2H19C19.2652 2 19.5196 2.10536 19.7071 2.29289C19.8946 2.48043 20 2.73478 20 3V7C20 7.26522 20.1054 7.51957 20.2929 7.70711C20.4804 7.89464 20.7348 8 21 8C21.2652 8 21.5196 7.89464 21.7071 7.70711C21.8946 7.51957 22 7.26522 22 7V3C22 2.20435 21.6839 1.44129 21.1213 0.87868C20.5587 0.31607 19.7956 0 19 0ZM1 8C1.26522 8 1.51957 7.89464 1.70711 7.70711C1.89464 7.51957 2 7.26522 2 7V3C2 2.73478 2.10536 2.48043 2.29289 2.29289C2.48043 2.10536 2.73478 2 3 2H7C7.26522 2 7.51957 1.89464 7.70711 1.70711C7.89464 1.51957 8 1.26522 8 1C8 0.734784 7.89464 0.48043 7.70711 0.292893C7.51957 0.105357 7.26522 0 7 0H3C2.20435 0 1.44129 0.31607 0.87868 0.87868C0.31607 1.44129 0 2.20435 0 3V7C0 7.26522 0.105357 7.51957 0.292893 7.70711C0.48043 7.89464 0.734784 8 1 8ZM9 4H5C4.73478 4 4.48043 4.10536 4.29289 4.29289C4.10536 4.48043 4 4.73478 4 5V9C4 9.26522 4.10536 9.51957 4.29289 9.70711C4.48043 9.89464 4.73478 10 5 10H9C9.26522 10 9.51957 9.89464 9.70711 9.70711C9.89464 9.51957 10 9.26522 10 9V5C10 4.73478 9.89464 4.48043 9.70711 4.29289C9.51957 4.10536 9.26522 4 9 4ZM8 8H6V6H8V8ZM13 10H17C17.2652 10 17.5196 9.89464 17.7071 9.70711C17.8946 9.51957 18 9.26522 18 9V5C18 4.73478 17.8946 4.48043 17.7071 4.29289C17.5196 4.10536 17.2652 4 17 4H13C12.7348 4 12.4804 4.10536 12.2929 4.29289C12.1054 4.48043 12 4.73478 12 5V9C12 9.26522 12.1054 9.51957 12.2929 9.70711C12.4804 9.89464 12.7348 10 13 10ZM14 6H16V8H14V6ZM9 12H5C4.73478 12 4.48043 12.1054 4.29289 12.2929C4.10536 12.4804 4 12.7348 4 13V17C4 17.2652 4.10536 17.5196 4.29289 17.7071C4.48043 17.8946 4.73478 18 5 18H9C9.26522 18 9.51957 17.8946 9.70711 17.7071C9.89464 17.5196 10 17.2652 10 17V13C10 12.7348 9.89464 12.4804 9.70711 12.2929C9.51957 12.1054 9.26522 12 9 12ZM8 16H6V14H8V16ZM13 15C13.2652 15 13.5196 14.8946 13.7071 14.7071C13.8946 14.5196 14 14.2652 14 14C14.2652 14 14.5196 13.8946 14.7071 13.7071C14.8946 13.5196 15 13.2652 15 13C15 12.7348 14.8946 12.4804 14.7071 12.2929C14.5196 12.1054 14.2652 12 14 12H13C12.7348 12 12.4804 12.1054 12.2929 12.2929C12.1054 12.4804 12 12.7348 12 13V14C12 14.2652 12.1054 14.5196 12.2929 14.7071C12.4804 14.8946 12.7348 15 13 15ZM17 12C16.7348 12 16.4804 12.1054 16.2929 12.2929C16.1054 12.4804 16 12.7348 16 13V16C15.7348 16 15.4804 16.1054 15.2929 16.2929C15.1054 16.4804 15 16.7348 15 17C15 17.2652 15.1054 17.5196 15.2929 17.7071C15.4804 17.8946 15.7348 18 16 18H17C17.2652 18 17.5196 17.8946 17.7071 17.7071C17.8946 17.5196 18 17.2652 18 17V13C18 12.7348 17.8946 12.4804 17.7071 12.2929C17.5196 12.1054 17.2652 12 17 12ZM13 16C12.8022 16 12.6089 16.0586 12.4444 16.1685C12.28 16.2784 12.1518 16.4346 12.0761 16.6173C12.0004 16.8 11.9806 17.0011 12.0192 17.1951C12.0578 17.3891 12.153 17.5673 12.2929 17.7071C12.4327 17.847 12.6109 17.9422 12.8049 17.9808C12.9989 18.0194 13.2 17.9996 13.3827 17.9239C13.5654 17.8482 13.7216 17.72 13.8315 17.5556C13.9414 17.3911 14 17.1978 14 17C14 16.7348 13.8946 16.4804 13.7071 16.2929C13.5196 16.1054 13.2652 16 13 16Z" fill="white" stroke="#0D0D0D" stroke-width="0.4" mask="url(#path-1-inside-1_5937_79)"/>
</svg>

''';

  final String ginieSvgString = '''<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.3">
<path d="M9.2242 2.49002C8.90443 2.35523 8.57343 2.27567 8.25304 2.28378C7.11434 2.28721 6.16501 2.99861 5.87176 4.07194C5.79033 4.37022 5.76444 4.68473 5.72107 4.993C5.6643 5.39894 5.37978 5.67725 4.96891 5.72468C4.7315 5.75214 4.49315 5.77678 4.25886 5.8214C2.97541 6.06602 2.09815 7.29911 2.31965 8.58897C2.38267 8.95653 2.54271 9.30973 2.67779 9.6623C2.84376 10.096 2.75922 10.4448 2.39327 10.7247C2.22824 10.8511 2.05946 10.9731 1.8988 11.1051C0.804401 12.004 0.689596 13.6421 1.66357 14.6667C1.89069 14.9057 2.17115 15.0942 2.42946 15.3029C2.74674 15.5597 2.84376 15.9138 2.69245 16.2926C2.61727 16.4808 2.53428 16.6655 2.4591 16.8536C1.88538 18.292 2.73894 19.872 4.25793 20.1753C4.52248 20.2284 4.79358 20.2465 5.05938 20.293C5.41409 20.355 5.67053 20.6331 5.71827 20.9909C5.74915 21.2228 5.77504 21.4552 5.81123 21.6861C6.01963 23.0131 7.35955 23.9541 8.67045 23.6714C9.02173 23.5959 9.3571 23.4412 9.69559 23.3111C10.0937 23.1582 10.4462 23.248 10.7073 23.586C10.8218 23.7339 10.9338 23.8839 11.048 24.0321C12.0348 25.3142 13.9387 25.3242 14.9352 24.0524C15.0603 23.8927 15.1797 23.7289 15.3045 23.5691C15.5476 23.2577 15.9129 23.1569 16.2791 23.3026C16.4819 23.3831 16.68 23.4746 16.8834 23.5532C18.2489 24.0814 19.7554 23.3236 20.1329 21.9073C20.2137 21.6031 20.2352 21.283 20.2842 20.9703C20.3394 20.619 20.5949 20.3522 20.945 20.2923C21.1546 20.2564 21.3661 20.2309 21.5777 20.2056C22.9825 20.0374 23.9736 18.6602 23.6601 17.2823C23.5861 16.9566 23.442 16.6455 23.3188 16.3322C23.1516 15.9079 23.2392 15.5588 23.598 15.2817C23.7546 15.1613 23.9143 15.0452 24.0691 14.9222C25.1535 14.0608 25.3204 12.4676 24.4119 11.4243C24.1695 11.1456 23.8526 10.9313 23.5637 10.6948C23.2573 10.4442 23.155 10.0823 23.3019 9.71691C23.3815 9.5194 23.4691 9.32502 23.5471 9.12689C24.0616 7.81799 23.3871 6.34902 22.0494 5.9122C21.7177 5.80393 21.3587 5.77522 21.0102 5.72468C20.6246 5.66883 20.3416 5.4058 20.2839 5.02015C20.2508 4.79956 20.2243 4.57771 20.1947 4.35618C20.0197 3.04666 18.6985 2.06912 17.3997 2.3181C17.0275 2.38955 16.6707 2.55087 16.3131 2.68753C15.9113 2.84135 15.5522 2.75274 15.288 2.40984C15.1804 2.26974 15.0746 2.12809 14.9673 1.98768C13.9674 0.679715 12.0622 0.669107 11.0495 1.96615C10.9248 2.1259 10.8068 2.29096 10.6805 2.44946C10.4481 2.74026 10.0887 2.83823 9.74208 2.70531C9.56768 2.63823 9.39641 2.56272 9.2242 2.49002Z" stroke="white" stroke-width="1.5" stroke-miterlimit="10"/>
<path d="M9.82087 12.067C10.2658 12.067 10.7007 11.935 11.0706 11.6879C11.4405 11.4407 11.7288 11.0894 11.899 10.6784C12.0693 10.2674 12.1138 9.81508 12.027 9.37874C11.9403 8.9424 11.726 8.5416 11.4114 8.22702C11.0969 7.91243 10.696 7.6982 10.2597 7.61141C9.82337 7.52461 9.37109 7.56916 8.96007 7.73941C8.54905 7.90966 8.19774 8.19797 7.95057 8.56788C7.7034 8.93779 7.57148 9.37269 7.57148 9.81758C7.57213 10.414 7.80933 10.9857 8.23103 11.4074C8.65273 11.8291 9.2245 12.0663 9.82087 12.067ZM9.82087 9.06778C9.96917 9.06778 10.1141 9.11176 10.2374 9.19414C10.3607 9.27653 10.4568 9.39364 10.5136 9.53064C10.5703 9.66765 10.5852 9.81841 10.5563 9.96386C10.5273 10.1093 10.4559 10.2429 10.3511 10.3478C10.2462 10.4526 10.1126 10.524 9.96715 10.553C9.82171 10.5819 9.67095 10.5671 9.53394 10.5103C9.39693 10.4536 9.27983 10.3574 9.19744 10.2341C9.11505 10.1108 9.07108 9.96587 9.07108 9.81758C9.07121 9.61876 9.15025 9.42812 9.29083 9.28754C9.43142 9.14695 9.62206 9.06791 9.82087 9.06778ZM16.1824 13.9298C15.7376 13.9298 15.3027 14.0617 14.9327 14.3088C14.5628 14.556 14.2745 14.9073 14.1043 15.3183C13.934 15.7294 13.8895 16.1816 13.9763 16.618C14.0631 17.0543 14.2773 17.4551 14.5919 17.7697C14.9065 18.0843 15.3073 18.2985 15.7436 18.3853C16.1799 18.4721 16.6322 18.4276 17.0432 18.2573C17.4543 18.0871 17.8056 17.7988 18.0527 17.4288C18.2999 17.0589 18.4318 16.624 18.4318 16.1791C18.4312 15.5828 18.194 15.011 17.7723 14.5893C17.3506 14.1676 16.7788 13.9304 16.1824 13.9298ZM16.1824 16.9289C16.0341 16.9289 15.8892 16.885 15.7659 16.8026C15.6426 16.7202 15.5465 16.6031 15.4897 16.4661C15.433 16.3291 15.4181 16.1783 15.4471 16.0329C15.476 15.8874 15.5474 15.7538 15.6523 15.649C15.7571 15.5441 15.8907 15.4727 16.0362 15.4438C16.1816 15.4148 16.3324 15.4297 16.4694 15.4864C16.6064 15.5432 16.7235 15.6393 16.8059 15.7626C16.8883 15.8859 16.9322 16.0309 16.9322 16.1791C16.9321 16.378 16.8531 16.5686 16.7125 16.7092C16.5719 16.8498 16.3813 16.9288 16.1824 16.9289ZM18.7804 7.21967C18.7107 7.15003 18.6281 7.09478 18.5371 7.05709C18.4462 7.0194 18.3487 7 18.2502 7C18.1518 7 18.0543 7.0194 17.9633 7.05709C17.8723 7.09478 17.7897 7.15003 17.7201 7.21967L7.22292 17.7168C7.15259 17.7863 7.09668 17.869 7.05842 17.9601C7.02017 18.0513 7.00031 18.1491 7 18.2479C6.99969 18.3468 7.01894 18.4447 7.05662 18.5361C7.09431 18.6275 7.1497 18.7105 7.2196 18.7804C7.2895 18.8503 7.37253 18.9057 7.46392 18.9434C7.5553 18.9811 7.65324 19.0003 7.75209 19C7.85094 18.9997 7.94875 18.9798 8.0399 18.9416C8.13105 18.9033 8.21373 18.8474 8.28318 18.7771L18.7804 8.27989C18.85 8.21028 18.9052 8.12764 18.9429 8.03668C18.9806 7.94573 19 7.84823 19 7.74978C19 7.65132 18.9806 7.55383 18.9429 7.46287C18.9052 7.37192 18.85 7.28927 18.7804 7.21967Z" fill="white"/>
</g>
</svg>
''';

  @override
  void initState() {
    super.initState();

    _freezeController = AnimationController(
      duration: Duration(milliseconds: 1000),
      vsync: this,
    );

    _freezeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _freezeController,
      curve: Curves.easeInOut,
    ));

    _textFadeAnimation = Tween<double>(
      begin: 1.0,
      end: 0.0,
    ).animate(CurvedAnimation(
      parent: _freezeController,
      curve: Interval(0.0, 0.4, curve: Curves.easeOut),
    ));

    _brightnessAnimation = Tween<double>(
      begin: 0.3,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _freezeController,
      curve: Curves.easeInOut,
    ));

    _fetchCardDetails();
  }

  @override
  void dispose() {
    _freezeController.dispose();
    super.dispose();
  }

  Future<void> _fetchCardDetails() async {
    try {
      setState(() {
        _isLoading = true;
      });

      final cardResponse = await http.get(
        Uri.parse('https://fakerapi.it/api/v1/credit_cards?_quantity=1'),
      );

      final dateResponse = await http.get(
        Uri.parse('https://fakerapi.it/api/v1/dates?_quantity=1&_locale=en_US'),
      );

      if (cardResponse.statusCode == 200 && dateResponse.statusCode == 200) {
        final cardData = json.decode(cardResponse.body);
        final dateData = json.decode(dateResponse.body);

        final random = math.Random();
        final cvv = (100 + random.nextInt(900)).toString();

        final cardNumber = cardData['data'][0]['number'].toString();

        final dateString = dateData['data'][0]['date'];
        final parsedDate = DateTime.parse(dateString);
        final futureDate = parsedDate.add(Duration(days: 365 * 2));
        final expiryDate = '${futureDate.month.toString().padLeft(2, '0')}/${futureDate.year.toString().substring(2)}';

        setState(() {
          _cardNumber = cardNumber;
          _expiryDate = expiryDate;
          _cvv = cvv;
          _isLoading = false;
        });
      } else {
        _setFallbackCardDetails();
      }
    } catch (e) {
      _setFallbackCardDetails();
    }
  }

  void _setFallbackCardDetails() {
    setState(() {
      _cardNumber = '8124421234567890';
      _expiryDate = '01/28';
      _cvv = '***';
      _isLoading = false;
    });
  }

  void _toggleFreeze() {
    setState(() {
      _isFrozen = !_isFrozen;
    });

    if (_isFrozen) {
      _freezeController.forward();
    } else {
      _freezeController.reverse();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF000000),
      body: SafeArea(
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.symmetric(horizontal: 20.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    SizedBox(height: 24),
                    Text(
                      'select payment mode',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 28,
                        fontWeight: FontWeight.w600,
                        letterSpacing: -0.5,
                      ),
                    ),
                    SizedBox(height: 12),
                    Text(
                      'choose your preferred payment method to\nmake payment',
                      style: TextStyle(
                        color: Color(0xFF666666),
                        fontSize: 16,
                        height: 1.4,
                        letterSpacing: -0.2,
                      ),
                    ),
                    SizedBox(height: 40),
                    Row(
                      children: [
                        _buildPaymentModeButton('pay', !_isCardSelected),
                        SizedBox(width: 16),
                        _buildPaymentModeButton('card', _isCardSelected),
                      ],
                    ),
                    SizedBox(height: 48),
                    if (_isCardSelected) ...[
                      Text(
                        'YOUR DIGITAL DEBIT CARD',
                        style: TextStyle(
                          color: Color(0xFF666666),
                          fontSize: 13,
                          fontWeight: FontWeight.w500,
                          letterSpacing: 1.2,
                        ),
                      ),
                      SizedBox(height: 24),
                      _buildCardWithFreezeButton(),
                      SizedBox(height: 40),
                    ],
                    SizedBox(height: 100),
                  ],
                ),
              ),
            ),
            _buildBottomNavigation(),
          ],
        ),
      ),
    );
  }

  Widget _buildPaymentModeButton(String text, bool isSelected) {
    return GestureDetector(
      onTap: () {
        setState(() {
          _isCardSelected = text == 'card';
        });
      },
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 32, vertical: 14),
        decoration: BoxDecoration(
          color: Colors.transparent,
          border: Border(
            top: BorderSide(
              color: isSelected ? Color(0xFFA90808) : Color(0xFF333333),
              width: 1.0,
            ),
            left: BorderSide(
              color: isSelected ? Color(0xFFA90808) : Color(0xFF333333),
              width: 1.0,
            ),
            right: BorderSide(
              color: isSelected ? Color(0xFFA90808) : Color(0xFF333333),
              width: 1.0,
            ),
          ),
          borderRadius: BorderRadius.circular(30),
        ),
        child: Text(
          text,
          style: TextStyle(
            color: isSelected ? Color(0xFFA90808) : Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }

  Widget _buildCardWithFreezeButton() {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        _buildAnimatedCard(),
        SizedBox(width: 30),
        Column(
          children: [
            GestureDetector(
              onTap: _toggleFreeze,
              child: Container(
                width: 58,
                height: 58,
                decoration: BoxDecoration(
                  color: Color(0xFF000000),
                  borderRadius: BorderRadius.circular(29),
                  border: _isFrozen
                      ? Border.all(
                    color: Color(0xFFA90808).withOpacity(0.2),
                    width: 1,
                  )
                      : Border(
                    top: BorderSide(color: Colors.white.withOpacity(0.2), width: 1),
                    left: BorderSide(color: Colors.white.withOpacity(0.2), width: 1),
                    right: BorderSide(color: Colors.white.withOpacity(0.2), width: 1),
                    bottom: BorderSide.none,
                  ),
                ),
                child: Center(
                  child: SizedBox(
                    width: 20,
                    height: 20,
                    child: SvgPicture.string(
                      snowflakeSvgString,
                      colorFilter: ColorFilter.mode(
                        _isFrozen ? Color(0xFFA90808) : Colors.white,
                        BlendMode.srcIn,
                      ),
                      fit: BoxFit.contain,
                    ),
                  ),
                ),
              ),
            ),
            SizedBox(height: 8),
            Text(
              _isFrozen ? 'unfreeze' : 'freeze',
              style: TextStyle(
                color: _isFrozen ? Color(0xFFA90808) : Colors.white,
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildAnimatedCard() {
    return Container(
      width: 186,
      height: 296,
      child: Stack(
        children: [
          AnimatedBuilder(
            animation: _brightnessAnimation,
            builder: (context, child) {
              return Container(
                width: 186,
                height: 296,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(20),
                  image: DecorationImage(
                    image: AssetImage('assets/images/card_background.png'),
                    fit: BoxFit.cover,
                    colorFilter: ColorFilter.matrix([
                      _brightnessAnimation.value, 0, 0, 0, 0,
                      0, _brightnessAnimation.value, 0, 0, 0,
                      0, 0, _brightnessAnimation.value, 0, 0,
                      0, 0, 0, 1, 0,
                    ]),
                  ),
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      Color(0xFF1a1a2e),
                      Color(0xFF16213e),
                      Color(0xFF0f1419),
                    ],
                  ),
                ),
              );
            },
          ),
          AnimatedBuilder(
            animation: _textFadeAnimation,
            builder: (context, child) {
              return Opacity(
                opacity: _textFadeAnimation.value,
                child: Padding(
                  padding: EdgeInsets.all(0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Padding(
                            padding: const EdgeInsets.only(top: 13, left: 19),
                            child: Container(
                              height: 24,
                              child: SvgPicture.string(
                                yoloSvgString,
                                height: 15,
                                fit: BoxFit.contain,
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(top: 13, right: 13),
                            child: Container(
                              height: 24,
                              child: SvgPicture.string(
                                yesbankSvgString,
                                height: 20,
                                fit: BoxFit.contain,
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 34),
                      if (_isLoading) ...[
                        _buildLoadingShimmer(),
                      ] else ...[
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Padding(
                              padding: const EdgeInsets.only(left: 23),
                              child: Expanded(
                                flex: 3,
                                child: Text(
                                  _formatCardNumber(_cardNumber),
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                    letterSpacing: 1.2,
                                    height: 1.3,
                                  ),
                                ),
                              ),
                            ),
                            SizedBox(width: 16),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Padding(
                                  padding: const EdgeInsets.only(right: 55),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        'expiry',
                                        style: TextStyle(
                                          color: Color(0xFF888888),
                                          fontSize: 10,
                                          letterSpacing: 0.8,
                                        ),
                                      ),
                                      SizedBox(height: 4),
                                      Text(
                                        _expiryDate,
                                        style: TextStyle(
                                          color: Colors.white,
                                          fontSize: 14,
                                          fontWeight: FontWeight.w500,
                                          letterSpacing: 0.8,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                SizedBox(height: 16),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'cvv',
                                      style: TextStyle(
                                        color: Color(0xFF888888),
                                        fontSize: 10,
                                        letterSpacing: 0.8,
                                      ),
                                    ),
                                    SizedBox(height: 4),
                                    Text(
                                      _cvv,
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 14,
                                        fontWeight: FontWeight.w500,
                                        letterSpacing: 0.8,
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ],
                        ),
                      ],
                      SizedBox(height: 30),
                      Padding(
                        padding: const EdgeInsets.only(left: 20.0),
                        child: Column(
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.start,
                              children: [
                                GestureDetector(
                                  onTap: () {
                                    if (!_isLoading) {
                                      _copyCardDetails();
                                    }
                                  },
                                  child: Row(
                                    children: [
                                      Icon(
                                        Icons.copy_outlined,
                                        color: _isLoading ? Color(0xFF666666) : Color(0xFFA90808),
                                        size: 15,
                                      ),
                                      SizedBox(width: 8),
                                      Text(
                                        'copy details',
                                        style: TextStyle(
                                          color: _isLoading ? Color(0xFF666666) : Color(0xFFA90808),
                                          fontSize: 15,
                                          fontWeight: FontWeight.w400,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.end,
                              children: [
                                Padding(
                                  padding: const EdgeInsets.only(right: 8.0, bottom: 0),
                                  child: Container(
                                    height: 57,
                                    child: SvgPicture.string(
                                      rupaySvgString,
                                      fit: BoxFit.contain,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      SizedBox(height: 20),
                    ],
                  ),
                ),
              );
            },
          ),
          AnimatedBuilder(
            animation: _freezeAnimation,
            builder: (context, child) {
              return Positioned.fill(
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Colors.transparent,
                  ),
                  child: _freezeAnimation.value > 0
                      ? CustomPaint(
                    painter: ExactFrostPainter(_freezeAnimation.value),
                  )
                      : null,
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingShimmer() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              flex: 3,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    height: 16,
                    width: double.infinity,
                    decoration: BoxDecoration(
                      color: Color(0xFF333333),
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                  SizedBox(height: 8),
                  Container(
                    height: 16,
                    width: double.infinity,
                    decoration: BoxDecoration(
                      color: Color(0xFF333333),
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                  SizedBox(height: 8),
                  Container(
                    height: 16,
                    width: double.infinity,
                    decoration: BoxDecoration(
                      color: Color(0xFF333333),
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                  SizedBox(height: 8),
                  Container(
                    height: 16,
                    width: 120,
                    decoration: BoxDecoration(
                      color: Color(0xFF333333),
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(width: 16),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  height: 12,
                  width: 40,
                  decoration: BoxDecoration(
                    color: Color(0xFF333333),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
                SizedBox(height: 4),
                Container(
                  height: 14,
                  width: 35,
                  decoration: BoxDecoration(
                    color: Color(0xFF333333),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
                SizedBox(height: 16),
                Container(
                  height: 12,
                  width: 25,
                  decoration: BoxDecoration(
                    color: Color(0xFF333333),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
                SizedBox(height: 4),
                Container(
                  height: 14,
                  width: 30,
                  decoration: BoxDecoration(
                    color: Color(0xFF333333),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
              ],
            ),
          ],
        ),
      ],
    );
  }

  String _formatCardNumber(String number) {
    String cleaned = number.replaceAll(RegExp(r'\D'), '');
    if (cleaned.length >= 16) {
      return '${cleaned.substring(0, 4)}\n${cleaned.substring(4, 8)}\n${cleaned.substring(8, 12)}\n${cleaned.substring(12, 16)}';
    }
    return cleaned;
  }

  void _copyCardDetails() {
    final details = 'Card: ${_cardNumber.replaceAll(RegExp(r'\D'), '')}\nExpiry: $_expiryDate\nCVV: $_cvv';
    Clipboard.setData(ClipboardData(text: details));

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          'Card details copied to clipboard',
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: Color(0xFFA90808),
        duration: Duration(seconds: 2),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
      ),
    );
  }

  Widget _buildBottomNavigation() {
    return Container(
      decoration: BoxDecoration(
        color: Color(0xFF000000),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            child: CustomPaint(
              painter: CurvedLinePainter(),
              size: Size(MediaQuery.of(context).size.width, 1),
            ),
          ),
          SizedBox(height: 0),
          Container(
            height: 100,
            padding: EdgeInsets.only(bottom: 0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildNavItem(homeSvgString, 'home', 0),
                _buildNavItem(yolopaySvgString, 'yolo pay', 1),
                _buildNavItem(ginieSvgString, 'ginie', 2),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNavItem(String svgString, String label, int index) {
    final isSelected = _currentIndex == index;

    return GestureDetector(
      onTap: () {
        setState(() {
          _currentIndex = index;
        });
      },
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: EdgeInsets.all(14),
              decoration: BoxDecoration(
                color: isSelected ? Colors.white : Colors.transparent,
                borderRadius: BorderRadius.circular(25),
              ),
              child: SizedBox(
                width: 24,
                height: 24,
                child: SvgPicture.string(
                  svgString,
                  colorFilter: ColorFilter.mode(
                    isSelected ? Colors.black : Color(0xFF666666),
                    BlendMode.srcIn,
                  ),
                ),
              ),
            ),
            SizedBox(height: 8),
            Text(
              label,
              style: TextStyle(
                color: isSelected ? Colors.white : Color(0xFF666666),
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

}

class CurvedLinePainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..strokeWidth = 1.0
      ..style = PaintingStyle.stroke
      ..shader = LinearGradient(
        colors: [
          Colors.white.withOpacity(0.0),
          Colors.white.withOpacity(1.0),
          Colors.white.withOpacity(0.0),
        ],
        stops: [0.0, 0.5, 1.0],
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height));

    final path = Path();
    path.moveTo(0, 0);
    path.quadraticBezierTo(size.width / 2, -90, size.width, 0);
    canvas.drawPath(path, paint);
  }
  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

class ExactFrostPainter extends CustomPainter {
  final double animationValue;

  ExactFrostPainter(this.animationValue);

  @override
  void paint(Canvas canvas, Size size) {
    if (animationValue <= 0) return;

    final random = math.Random(42);

    final clipPath = Path()
      ..addRRect(RRect.fromRectAndRadius(
        Rect.fromLTWH(0, 0, size.width, size.height),
        const Radius.circular(16),
      ));
    canvas.clipPath(clipPath);

    final leftPath = Path();
    final leftStartY = 0.0;
    final leftEndY = size.height;
    leftPath.moveTo(5, leftStartY);

    for (double y = leftStartY; y <= leftEndY; y += 20) {
      final progress = (y - leftStartY) / (leftEndY - leftStartY);
      final baseWidth = 15 + math.sin(progress * math.pi * 3) * 8;
      final x = 5 + baseWidth + random.nextDouble() * 10 - 5;
      leftPath.lineTo(x, y);
    }
    leftPath.lineTo(2, leftEndY);
    leftPath.lineTo(0, leftEndY);
    leftPath.lineTo(0, leftStartY);
    leftPath.close();

    final leftGradient = LinearGradient(
      begin: Alignment.centerLeft,
      end: Alignment.centerRight,
      colors: [
        Colors.white.withOpacity(0.35 * animationValue),
        Colors.white.withOpacity(0.08 * animationValue),
      ],
    ).createShader(Rect.fromLTWH(0, leftStartY, 35, leftEndY - leftStartY));

    final leftPaint = Paint()
      ..shader = leftGradient
      ..maskFilter = MaskFilter.blur(BlurStyle.normal, 6);

    canvas.drawPath(leftPath, leftPaint);

    final rightPath = Path();
    final rightStartY = 0.0;
    final rightEndY = size.height;
    rightPath.moveTo(size.width - 5, rightStartY);

    for (double y = rightStartY; y <= rightEndY; y += 25) {
      final progress = (y - rightStartY) / (rightEndY - rightStartY);
      final baseWidth = 12 + math.sin(progress * math.pi * 2.5) * 10;
      final x = size.width - 5 - baseWidth + random.nextDouble() * 8 - 4;
      rightPath.lineTo(x, y);
    }
    rightPath.lineTo(size.width - 2, rightEndY);
    rightPath.lineTo(size.width, rightEndY);
    rightPath.lineTo(size.width, rightStartY);
    rightPath.close();

    final rightGradient = LinearGradient(
      begin: Alignment.centerRight,
      end: Alignment.centerLeft,
      colors: [
        Colors.white.withOpacity(0.35 * animationValue),
        Colors.white.withOpacity(0.08 * animationValue),
      ],
    ).createShader(Rect.fromLTWH(size.width - 35, rightStartY, 35, rightEndY - rightStartY));

    final rightPaint = Paint()
      ..shader = rightGradient
      ..maskFilter = MaskFilter.blur(BlurStyle.normal, 6);

    canvas.drawPath(rightPath, rightPaint);

    final cornerPath = Path();
    final cornerCenterX = size.width * 0.75;
    final cornerCenterY = size.height * 0.75;
    final cornerRadius = size.width * 0.15;

    cornerPath.moveTo(cornerCenterX + cornerRadius, cornerCenterY);
    for (int i = 0; i < 12; i++) {
      final angle = (i * 2 * math.pi) / 12;
      final radiusVar = 0.7 + random.nextDouble() * 0.6;
      final actualRadius = cornerRadius * radiusVar;
      final x = cornerCenterX + math.cos(angle) * actualRadius;
      final y = cornerCenterY + math.sin(angle) * actualRadius;

      if (i == 0) {
        cornerPath.moveTo(x, y);
      } else {
        final prevAngle = ((i - 1) * 2 * math.pi) / 12;
        final controlAngle = prevAngle + (angle - prevAngle) * 0.5;
        final controlRadius = cornerRadius * (0.8 + random.nextDouble() * 0.4);
        final controlX = cornerCenterX + math.cos(controlAngle) * controlRadius;
        final controlY = cornerCenterY + math.sin(controlAngle) * controlRadius;
        cornerPath.quadraticBezierTo(controlX, controlY, x, y);
      }
    }
    cornerPath.close();

    final cornerGradient = RadialGradient(
      center: Alignment.center,
      radius: 0.8,
      colors: [
        Colors.white.withOpacity(0.35 * animationValue),
        Colors.white.withOpacity(0.08 * animationValue),
      ],
    ).createShader(Rect.fromCircle(
      center: Offset(cornerCenterX, cornerCenterY),
      radius: cornerRadius,
    ));

    final cornerPaint = Paint()
      ..shader = cornerGradient
      ..maskFilter = MaskFilter.blur(BlurStyle.normal, 6);

    canvas.drawPath(cornerPath, cornerPaint);

    final horizontalPath = Path();
    final horizY = size.height * 0.6;
    final horizStartX = size.width * 0.1;
    final horizEndX = size.width * 0.9;
    final horizHeight = 25;

    horizontalPath.moveTo(horizStartX, horizY - horizHeight * 0.6);

    for (double x = horizStartX; x <= horizEndX; x += 25) {
      final progress = (x - horizStartX) / (horizEndX - horizStartX);
      final topHeight = horizHeight * 0.6 + math.sin(progress * math.pi * 2) * 8;
      horizontalPath.lineTo(x, horizY - topHeight + random.nextDouble() * 6 - 3);
    }

    for (double x = horizEndX; x >= horizStartX; x -= 25) {
      final progress = (x - horizStartX) / (horizEndX - horizStartX);
      final bottomHeight = horizHeight * 0.4 + math.cos(progress * math.pi * 1.5) * 6;
      horizontalPath.lineTo(x, horizY + bottomHeight + random.nextDouble() * 6 - 3);
    }

    horizontalPath.close();

    final horizontalGradient = RadialGradient(
      center: Alignment.center,
      radius: 1.0,
      colors: [
        Colors.white.withOpacity(0.35 * animationValue),
        Colors.white.withOpacity(0.08 * animationValue),
      ],
    ).createShader(Rect.fromLTWH(
      horizStartX,
      horizY - horizHeight,
      horizEndX - horizStartX,
      horizHeight * 2,
    ));

    final horizontalPaint = Paint()
      ..shader = horizontalGradient
      ..maskFilter = MaskFilter.blur(BlurStyle.normal, 6);

    canvas.drawPath(horizontalPath, horizontalPaint);

    final combinedNoisePath = Path();

    for (int i = 0; i < 800 * animationValue; i++) {
      final centerX = random.nextDouble() * size.width;
      final centerY = random.nextDouble() * size.height;

      final shapePath = Path();

      final shapeType = random.nextInt(3);

      if (shapeType == 0) {
        final width = 8.0 + random.nextDouble() * 10.0;
        final height = 6.0 + random.nextDouble() * 8.0;
        final flatteningFactor = 0.3 + random.nextDouble() * 0.4;
        final points = 12 + random.nextInt(8);

        List<Offset> shapePoints = [];
        List<Offset> controlPoints = [];

        for (int j = 0; j < points; j++) {
          final angle = (j * 2 * math.pi) / points;
          final baseRadius = (width + height) * 0.25;
          final flatRadius = baseRadius * flatteningFactor;
          final radiusVariation = 0.7 + random.nextDouble() * 0.6;
          final actualRadius = flatRadius * radiusVariation;

          final x = centerX + math.cos(angle) * actualRadius;
          final y = centerY + math.sin(angle) * actualRadius;
          shapePoints.add(Offset(x, y));
        }

        for (int j = 0; j < points; j++) {
          final prev = shapePoints[(j - 1 + points) % points];
          final current = shapePoints[j];
          final next = shapePoints[(j + 1) % points];
          final nextNext = shapePoints[(j + 2) % points];

          final tangentX = (next.dx - prev.dx) * 0.16;
          final tangentY = (next.dy - prev.dy) * 0.16;

          controlPoints.add(Offset(current.dx + tangentX, current.dy + tangentY));
        }

        if (shapePoints.isNotEmpty) {
          shapePath.moveTo(shapePoints[0].dx, shapePoints[0].dy);
          for (int j = 0; j < shapePoints.length; j++) {
            final current = shapePoints[j];
            final next = shapePoints[(j + 1) % shapePoints.length];
            final currentControl = controlPoints[j];
            final nextControl = controlPoints[(j + 1) % shapePoints.length];

            shapePath.cubicTo(
                currentControl.dx, currentControl.dy,
                next.dx - (nextControl.dx - next.dx) * 0.5,
                next.dy - (nextControl.dy - next.dy) * 0.5,
                next.dx, next.dy
            );
          }
        }

      } else if (shapeType == 1) {
        final baseSize = 7.0 + random.nextDouble() * 9.0;
        final flatteningFactor = 0.25 + random.nextDouble() * 0.35;
        final points = 8 + random.nextInt(8);

        List<Offset> shapePoints = [];
        for (int j = 0; j < points; j++) {
          final angle = (j * 2 * math.pi) / points;
          final isOuter = j % 2 == 0;
          final radiusMultiplier = isOuter ? 1.0 : 0.6 + random.nextDouble() * 0.3;
          final actualRadius = baseSize * flatteningFactor * radiusMultiplier;

          final x = centerX + math.cos(angle) * actualRadius;
          final y = centerY + math.sin(angle) * actualRadius;
          shapePoints.add(Offset(x, y));
        }

        if (shapePoints.isNotEmpty) {
          shapePath.moveTo(shapePoints[0].dx, shapePoints[0].dy);
          for (int j = 0; j < shapePoints.length; j++) {
            final current = shapePoints[j];
            final next = shapePoints[(j + 1) % shapePoints.length];
            final prev = shapePoints[(j - 1 + shapePoints.length) % shapePoints.length];
            final nextNext = shapePoints[(j + 2) % shapePoints.length];

            final tension = 0.25;
            final control1X = current.dx + (next.dx - prev.dx) * tension;
            final control1Y = current.dy + (next.dy - prev.dy) * tension;
            final control2X = next.dx - (nextNext.dx - current.dx) * tension;
            final control2Y = next.dy - (nextNext.dy - current.dy) * tension;

            shapePath.cubicTo(control1X, control1Y, control2X, control2Y, next.dx, next.dy);
          }
        }

      } else {
        final baseSize = 9.0 + random.nextDouble() * 11.0;
        final flatteningFactor = 0.2 + random.nextDouble() * 0.4;
        final points = 6 + random.nextInt(6);

        List<Offset> shapePoints = [];
        for (int j = 0; j < points; j++) {
          final angle = (j * 2 * math.pi) / points;
          final radiusVariation = 0.5 + random.nextDouble() * 1.0;
          final actualRadius = baseSize * flatteningFactor * radiusVariation;

          final x = centerX + math.cos(angle) * actualRadius;
          final y = centerY + math.sin(angle) * actualRadius;
          shapePoints.add(Offset(x, y));
        }

        if (shapePoints.isNotEmpty) {
          shapePath.moveTo(shapePoints[0].dx, shapePoints[0].dy);

          for (int j = 0; j < shapePoints.length; j++) {
            final current = shapePoints[j];
            final next = shapePoints[(j + 1) % shapePoints.length];
            final prev = shapePoints[(j - 1 + shapePoints.length) % shapePoints.length];
            final nextNext = shapePoints[(j + 2) % shapePoints.length];

            final t1X = (next.dx - prev.dx) * 0.15;
            final t1Y = (next.dy - prev.dy) * 0.15;
            final t2X = (nextNext.dx - current.dx) * 0.15;
            final t2Y = (nextNext.dy - current.dy) * 0.15;

            shapePath.cubicTo(
                current.dx + t1X, current.dy + t1Y,
                next.dx - t2X, next.dy - t2Y,
                next.dx, next.dy
            );
          }
        }
      }

      shapePath.close();
      combinedNoisePath.addPath(shapePath, Offset.zero);
    }

    final noisePaint = Paint()
      ..color = Colors.white.withOpacity(0.05 * animationValue)
      ..style = PaintingStyle.fill;

    canvas.drawPath(combinedNoisePath, noisePaint);

    final tintPaint = Paint()
      ..color = const Color(0xFFE0E7F1).withOpacity(0.08 * animationValue)
      ..style = PaintingStyle.fill;

    canvas.drawRect(Offset.zero & size, tintPaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}

class TopHalfBorderPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.white
      ..strokeWidth = 1.5
      ..style = PaintingStyle.stroke;

    final center = Offset(size.width / 2, size.height / 2);
    final radius = size.width / 2;

    canvas.drawArc(
      Rect.fromCircle(center: center, radius: radius - paint.strokeWidth / 2),
      math.pi,
      math.pi,
      false,
      paint,
    );
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}